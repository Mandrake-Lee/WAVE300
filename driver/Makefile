
CONFIG_FILE:=.config

CONFIG_EXISTS := $(wildcard $(CONFIG_FILE))

VCPROJ_FNAME:=msvc_all_[$(shell echo $${PWD\#\#*/})].vcproj
VCXPROJ_FNAME:=msvc_all_[$(shell echo $${PWD\#\#*/})].vcxproj
VCXPROJ_FILTERS_FNAME:=$(VCXPROJ_FNAME).filters
WBLD_DIR:=support/wbld_scripts/

ifneq ($(CONFIG_EXISTS),)

ifneq ($(_LQBLD_FTP_COPY),)
AUTHFILE:=support/release/release_config/.nld_release_ftp
FTPDIR:=Israel/users/wave300/Kiev_MTLK/nld/temp/$(USER)
endif

include $(CONFIG_FILE)

all: .build_tree_ts
	@make -C builds/$(CONFIG_ENVIRONMENT_NAME) install
ifneq ($(_TFTPROOT),)
ifeq ($(CONFIG_LIN_DRV), y)
	@cp -v builds/$(CONFIG_ENVIRONMENT_NAME)/binaries/wls/driver/* $(_TFTPROOT)
endif
ifeq ($(CONFIG_LIN_MTTOOLS), y)
	@cp -v builds/$(CONFIG_ENVIRONMENT_NAME)/binaries/wls/mttools/* $(_TFTPROOT)
endif
ifeq ($(CONFIG_LIN_RTLOG_COMPONENTS), y)
	@cp -v builds/$(CONFIG_ENVIRONMENT_NAME)/binaries/wls/rtlogger/* $(_TFTPROOT)
endif
endif
ifneq ($(_LQBLD_FTP_COPY),)
ifeq ($(CONFIG_LIN_DRV), y)
	@ncftpput -m -v -R -f $(AUTHFILE) $(FTPDIR) builds/$(CONFIG_ENVIRONMENT_NAME)/binaries/wls/driver/*
endif
ifeq ($(CONFIG_LIN_MTTOOLS), y)
	@ncftpput -m -v -R -f $(AUTHFILE) $(FTPDIR) builds/$(CONFIG_ENVIRONMENT_NAME)/binaries/wls/mttools/*
endif
ifeq ($(CONFIG_LIN_RTLOG_COMPONENTS), y)
	@ncftpput -m -v -R -f $(AUTHFILE) $(FTPDIR) builds/$(CONFIG_ENVIRONMENT_NAME)/binaries/wls/rtlogger/*
endif
endif

else

all:
	@echo ERROR: no .config file found!
	@echo Run "make xconfig" or "make menuconfig" first to generate .config file!

clean:
	@echo ERROR: no .config file found!
	@echo Run "make xconfig" or "make menuconfig" first to generate .config file!

endif

vcproj:
	@echo "Building VCPROJ ($(VCPROJ_FNAME))..."
	@perl $(WBLD_DIR)/mtlk_list_files.pl . mtlk_list_files.cfg $(WBLD_DIR)/msvc_all.vcproj.cfg.template NO_FILTERS > $(VCPROJ_FNAME) < $(WBLD_DIR)/msvc_all.vcproj.template
	@echo "Done ($(VCPROJ_FNAME))!"

vcxproj:
	@echo "Building VCXPROJ ($(VCXPROJ_FNAME))..."
	@perl $(WBLD_DIR)/mtlk_list_files.pl . mtlk_list_files.cfg $(WBLD_DIR)/msvc_all.vcxproj.cfg.template $(WBLD_DIR)/msvc_all.vcxproj.cfg_list.template > $(VCXPROJ_FNAME) < $(WBLD_DIR)/msvc_all.vcxproj.template
	@perl $(WBLD_DIR)/mtlk_list_files.pl . mtlk_list_files.cfg $(WBLD_DIR)/msvc_all.vcxproj.cfg.template $(WBLD_DIR)/msvc_all.vcxproj.cfg_list.template > $(VCXPROJ_FILTERS_FNAME) < $(WBLD_DIR)/msvc_all.vcxproj.filters.template
	@echo "Done ($(VCXPROJ_FNAME))!"

.PHONY: .build_conf .build_mconf .build_qconf .config_x .config_m .config_c .config_d config xconfig menuconfig defconfig

configure:
#configure: configure.ac branch_version.m4
	#autoreconf --install

branch_version.m4: branch_version.m4.in mtlk_version
	@echo dnl WARNING:                                                                                       >  $@
	@echo dnl WARNING: This file is automatically generated from branch_version.m4.in.                       >> $@
	@echo dnl WARNING: Do not edit it, all changes will gone.                                                >> $@
	@echo dnl WARNING: Edit branch_version.m4.in instead.                                                    >> $@
	@echo dnl WARNING:                                                                                       >> $@
	@echo                                                                                                    >> $@
	@sed -e"s/@BRANCH_VERSION@/`perl ./support/mtlk_ver.pl -G < mtlk_version`/g" < branch_version.m4.in >> $@

config: .build_conf .config_c .config.h
xconfig: .build_qconf .config_x .config.h
menuconfig: .build_mconf .config_m .config.h
defconfig: .build_conf .config_d .config.h

BUILD_TREE_DEPS:=$(shell [ -f .config ] && ./support/cfghlpr.sh .config get_bld_tree_cfg)

# NOTE: .config.h is being copied for MSVC oldconfig correct parsing
.build_tree_ts .config.h:: configure .config $(BUILD_TREE_DEPS)
	./support/cfghlpr.sh .config
	@cp -v $(shell ./support/cfghlpr.sh .config get_bld_dir)/.config.h .
	@touch .build_tree_ts

.build_conf:
	@make -C tools/kconfig config

.build_qconf:
	@make -C tools/kconfig xconfig

.build_mconf:
	@make -C tools/kconfig menuconfig

ifneq ( $(BUILD_TREE_DEPS), )

$(BUILD_TREE_DEPS):
	@echo -n

endif

.config_c:
	./tools/kconfig/conf ./MTLKConfig
	test .config.h -nt .config || rm -f .config.h

.config_x:
	./tools/kconfig/qconf ./MTLKConfig
	test .config.h -nt .config || rm -f .config.h

.config_m:
	./tools/kconfig/mconf ./MTLKConfig
	test .config.h -nt .config || rm -f .config.h

ifeq ($(MINICONFIG),)
MINICONFIG:=/dev/null
endif

.config_d:
	./tools/kconfig/conf -D $(MINICONFIG) MTLKConfig
	test .config.h -nt .config || rm -f .config.h

%: 
	@make -C builds/$(CONFIG_ENVIRONMENT_NAME) $@
